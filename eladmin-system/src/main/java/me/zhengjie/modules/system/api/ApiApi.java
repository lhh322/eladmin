/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.71).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package me.zhengjie.modules.system.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import me.zhengjie.modules.system.swagger.model.ErrorResponse;
import me.zhengjie.modules.system.swagger.model.SearchArticleResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-07-27T14:15:01.243014296Z[GMT]")
@Validated
public interface ApiApi {

    @Operation(summary = "Search Article with criteria", description = "Search Article with criteria", tags={ "config" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SearchArticleResponse.class))),

            @ApiResponse(responseCode = "400", description = "Invalid request", content = @Content(mediaType = "application/vnd.error+json", schema = @Schema(implementation = ErrorResponse.class))),

            @ApiResponse(responseCode = "404", description = "Record not found", content = @Content(mediaType = "application/vnd.error+json", schema = @Schema(implementation = ErrorResponse.class))),

            @ApiResponse(responseCode = "500", description = "System Internal Error. Please contact system administrator", content = @Content(mediaType = "application/vnd.error+json", schema = @Schema(implementation = ErrorResponse.class))) })
    @RequestMapping(value = "/api/v1/content/article",
            produces = { "application/json", "application/vnd.error+json" },
            method = RequestMethod.GET)
    ResponseEntity<SearchArticleResponse> searchArticle(@Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "title", required = false) String title
            , @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "category", required = false) String category
            , @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "label", required = false) String label
            , @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "page", required = false) Integer page
            , @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "size", required = false) Integer size
            , @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "sort", required = false) String sort
    );

}

